{
  "openapi": "3.0.0",
  "info": {
    "title": "Azure OpenAI Service API",
    "description": "Azure OpenAI APIs for completions and search",
    "version": "2025-01-01-preview"
  },
  "servers": [
    {
      "url": "https://{endpoint}/openai",
      "variables": {
        "endpoint": {
          "default": "your-resource-name.openai.azure.com"
        }
      }
    }
  ],
  "security": [
    {
      "bearer": [
        "api.read"
      ]
    },
    {
      "apiKey": []
    }
  ],
  "paths": {
    "/deployments/{deployment-id}/completions": {
      "post": {
        "summary": "Creates a completion for the provided prompt, parameters and chosen model.",
        "operationId": "Completions_Create",
        "parameters": [
          {
            "in": "path",
            "name": "deployment-id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "davinci",
              "description": "Deployment id of the model which was deployed."
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCompletionRequest"
              },
              "example": {
                "prompt": "Negate the following sentence.The price for bubblegum increased on thursday.\n\n Negated Sentence:",
                "max_tokens": 50
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createCompletionResponse"
                },
                "example": {
                  "model": "davinci",
                  "object": "text_completion",
                  "id": "cmpl-4509KAos68kxOqpE2uYGw81j6m7uo",
                  "created": 1637097562,
                  "choices": [
                    {
                      "index": 0,
                      "text": "The price for bubblegum decreased on thursday.",
                      "logprobs": null,
                      "finish_reason": "stop"
                    }
                  ]
                }
              }
            },
            "headers": {
              "apim-request-id": {
                "description": "Request ID for troubleshooting purposes",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            },
            "headers": {
              "apim-request-id": {
                "description": "Request ID for troubleshooting purposes",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a completion.": {
            "$ref": "./examples/completions.json"
          }
        }
      }
    },
    "/deployments/{deployment-id}/embeddings": {
      "post": {
        "summary": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.",
        "operationId": "embeddings_create",
        "parameters": [
          {
            "in": "path",
            "name": "deployment-id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ada-search-index-v1"
            },
            "description": "The deployment id of the model which was deployed."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "input": {
                    "description": "Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less.",
                    "oneOf": [
                      {
                        "type": "string",
                        "default": "",
                        "example": "This is a test.",
                        "nullable": true
                      },
                      {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 2048,
                        "items": {
                          "type": "string",
                          "minLength": 1,
                          "example": "This is a test.",
                          "nullable": false
                        }
                      }
                    ]
                  },
                  "user": {
                    "description": "A unique identifier representing your end-user, which can help monitoring and detecting abuse.",
                    "type": "string",
                    "nullable": false
                  },
                  "input_type": {
                    "description": "input type of embedding search to use",
                    "type": "string",
                    "example": "query"
                  },
                  "encoding_format": {
                    "description": "The format to return the embeddings in. Can be either `float` or `base64`. Defaults to `float`.",
                    "type": "string",
                    "example": "float",
                    "nullable": true
                  },
                  "dimensions": {
                    "description": "The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.",
                    "type": "integer",
                    "example": 1,
                    "nullable": true
                  }
                },
                "required": [
                  "input"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string"
                    },
                    "model": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer"
                          },
                          "object": {
                            "type": "string"
                          },
                          "embedding": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "required": [
                          "index",
                          "object",
                          "embedding"
                        ]
                      }
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "prompt_tokens": {
                          "type": "integer"
                        },
                        "total_tokens": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "prompt_tokens",
                        "total_tokens"
                      ]
                    }
                  },
                  "required": [
                    "object",
                    "model",
                    "data",
                    "usage"
                  ]
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a embeddings.": {
            "$ref": "./examples/embeddings.json"
          }
        }
      }
    },
	"/deployments/{deployment-id}/chat/completions": {
      "post": {
        "summary": "Creates a completion for the chat message",
        "operationId": "ChatCompletions_Create",
        "parameters": [
          {
            "in": "path",
            "name": "deployment-id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Deployment id of the model which was deployed."
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createChatCompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/createChatCompletionResponse"
                    },
                    {
                      "$ref": "#/components/schemas/createChatCompletionStreamResponse"
                    }
                  ]
                }
              }
            },
            "headers": {
              "apim-request-id": {
                "description": "Request ID for troubleshooting purposes",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponse"
                }
              }
            },
            "headers": {
              "apim-request-id": {
                "description": "Request ID for troubleshooting purposes",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a chat completion.": {
            "$ref": "./examples/chat_completions.json"
          },
          "Creates a completion based on Azure Search data and system-assigned managed identity.": {
            "$ref": "./examples/chat_completions_azure_search_minimum.json"
          },
          "Creates a completion based on Azure Search image vector data.": {
            "$ref": "./examples/chat_completions_azure_search_image_vector.json"
          },
          "Creates a completion based on Azure Search vector data, previous assistant message and user-assigned managed identity.": {
            "$ref": "./examples/chat_completions_azure_search_advanced.json"
          },
          "Creates a completion for the provided Azure Cosmos DB.": {
            "$ref": "./examples/chat_completions_cosmos_db.json"
          },
          "Creates a completion for the provided Mongo DB.": {
            "$ref": "./examples/chat_completions_mongo_db.json"
          },
          "Creates a completion for the provided Elasticsearch.": {
            "$ref": "./examples/chat_completions_elasticsearch.json"
          },
          "Creates a completion for the provided Pinecone resource.": {
            "$ref": "./examples/chat_completions_pinecone.json"
          }
        }
      }
    },
    "/deployments/{deployment-id}/audio/transcriptions": {
      "post": {
        "summary": "Transcribes audio into the input language.",
        "operationId": "Transcriptions_Create",
        "parameters": [
          {
            "in": "path",
            "name": "deployment-id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "whisper",
              "description": "Deployment id of the whisper model."
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/createTranscriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/audioResponse"
                    },
                    {
                      "$ref": "#/components/schemas/audioVerboseResponse"
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt)."
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create an audio transcription with json response format.": {
            "$ref": "./examples/audio_transcription_object.json"
          },
          "Create an audio transcription with text response format.": {
            "$ref": "./examples/audio_transcription_text.json"
          }
        }
      }
    },
    "/deployments/{deployment-id}/audio/translations": {
      "post": {
        "summary": "Transcribes and translates input audio into English text.",
        "operationId": "Translations_Create",
        "parameters": [
          {
            "in": "path",
            "name": "deployment-id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "whisper",
              "description": "Deployment id of the whisper model which was deployed."
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/createTranslationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/audioResponse"
                    },
                    {
                      "$ref": "#/components/schemas/audioVerboseResponse"
                    }
                  ]
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt)."
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create an audio translation with json response format.": {
            "$ref": "./examples/audio_translation_object.json"
          },
          "Create an audio translation with text response format.": {
            "$ref": "./examples/audio_translation_text.json"
          }
        }
      }
    },
    "/deployments/{deployment-id}/audio/speech": {
      "post": {
        "summary": "Generates audio from the input text.",
        "operationId": "Speech_Create",
        "parameters": [
          {
            "in": "path",
            "name": "deployment-id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tts-1",
              "description": "Deployment id of the tts model which was deployed."
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/createSpeechRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create an audio from text with response format mp3.": {
            "$ref": "./examples/audio_speech.json"
          }
        }
      }
    },
    "/deployments/{deployment-id}/images/generations": {
      "post": {
        "summary": "Generates a batch of images from a text caption on a given DALLE model deployment",
        "operationId": "ImageGenerations_Create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/imageGenerationsRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "deployment-id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "dalle-deployment",
              "description": "Deployment id of the dalle model which was deployed."
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/generateImagesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dalleErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create an image.": {
            "$ref": "./examples/image_generation.json"
          }
        }
      }
    },
    "/assistants": {
      "get": {
        "operationId": "List_Assistants",
        "tags": [
          "Assistants"
        ],
        "summary": "Returns a list of assistants.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "x-ms-enum": {
                "name": "ListAssistantsOrder",
                "modelAsString": true,
                "values": [
                  {
                    "value": "asc",
                    "description": "Order results in ascending order"
                  },
                  {
                    "value": "desc",
                    "description": "Order results in descending order"
                  }
                ]
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listAssistantsResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "List all assistants.": {
            "$ref": "./examples/list_assistants.json"
          }
        }
      },
      "post": {
        "operationId": "Create_Assistant",
        "tags": [
          "Assistants"
        ],
        "summary": "Create an assistant with a model and instructions.",
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createAssistantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assistantObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create an assistant.": {
            "$ref": "./examples/create_assistant.json"
          }
        }
      }
    },
    "/assistants/{assistant_id}": {
      "get": {
        "operationId": "Get_Assistant",
        "tags": [
          "Assistants"
        ],
        "summary": "Retrieves an assistant.",
        "parameters": [
          {
            "in": "path",
            "name": "assistant_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the assistant to retrieve."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assistantObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieves an assistant.": {
            "$ref": "./examples/retrieve_assistant.json"
          }
        }
      },
      "post": {
        "operationId": "Modify_Assistant",
        "tags": [
          "Assistant"
        ],
        "summary": "Modifies an assistant.",
        "parameters": [
          {
            "in": "path",
            "name": "assistant_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the assistant to modify."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/modifyAssistantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assistantObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Modifies an assistant.": {
            "$ref": "./examples/modify_assistant.json"
          }
        }
      },
      "delete": {
        "operationId": "Delete_Assistant",
        "tags": [
          "Assistants"
        ],
        "summary": "Delete an assistant.",
        "parameters": [
          {
            "in": "path",
            "name": "assistant_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the assistant to delete."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteAssistantResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete an assistant.": {
            "$ref": "./examples/delete_assistant.json"
          }
        }
      }
    },
    "/threads": {
      "post": {
        "operationId": "Create_Thread",
        "tags": [
          "Assistants"
        ],
        "summary": "Create a thread.",
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createThreadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/threadObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a thread.": {
            "$ref": "./examples/create_thread.json"
          }
        }
      }
    },
    "/threads/{thread_id}": {
      "get": {
        "operationId": "Get_Thread",
        "tags": [
          "Assistants"
        ],
        "summary": "Retrieves a thread.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread to retrieve."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/threadObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieve a thread.": {
            "$ref": "./examples/retrieve_thread.json"
          }
        }
      },
      "post": {
        "operationId": "Modify_Thread",
        "tags": [
          "Assistants"
        ],
        "summary": "Modifies a thread.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread to modify. Only the `metadata` can be modified."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/modifyThreadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/threadObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Modify a thread.": {
            "$ref": "./examples/modify_thread.json"
          }
        }
      },
      "delete": {
        "operationId": "Delete_Thread",
        "tags": [
          "Assistants"
        ],
        "summary": "Delete a thread.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread to delete."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteThreadResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete a thread.": {
            "$ref": "./examples/delete_thread.json"
          }
        }
      }
    },
    "/threads/{thread_id}/messages": {
      "get": {
        "operationId": "List_Messages",
        "tags": [
          "Assistants"
        ],
        "summary": "Returns a list of messages for a given thread.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the [thread](/docs/api-reference/threads) the messages belong to."
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "x-ms-enum": {
                "name": "ListMessagesOrder",
                "modelAsString": true,
                "values": [
                  {
                    "value": "asc",
                    "description": "Order results in ascending order"
                  },
                  {
                    "value": "desc",
                    "description": "Order results in descending order"
                  }
                ]
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "run_id",
            "in": "query",
            "description": "Filter messages by the run ID that generated them.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listMessagesResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "List all messages.": {
            "$ref": "./examples/list_messages.json"
          }
        }
      },
      "post": {
        "operationId": "Create_Message",
        "tags": [
          "Assistants"
        ],
        "summary": "Create a message.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the [thread](/docs/api-reference/threads) to create a message for."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messageObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a message.": {
            "$ref": "./examples/create_message.json"
          }
        }
      }
    },
    "/threads/{thread_id}/messages/{message_id}": {
      "get": {
        "operationId": "Get_Message",
        "tags": [
          "Assistants"
        ],
        "summary": "Retrieve a message.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the [thread](/docs/api-reference/threads) to which this message belongs."
          },
          {
            "in": "path",
            "name": "message_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message to retrieve."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messageObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieve a message.": {
            "$ref": "./examples/get_message.json"
          }
        }
      },
      "post": {
        "operationId": "Modify_Message",
        "tags": [
          "Assistants"
        ],
        "summary": "Modifies a message.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread to which this message belongs."
          },
          {
            "in": "path",
            "name": "message_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the message to modify."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/modifyMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messageObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Modify a message.": {
            "$ref": "./examples/modify_message.json"
          }
        }
      }
    },
    "/threads/runs": {
      "post": {
        "operationId": "Create_Thread_And_Run",
        "tags": [
          "Assistants"
        ],
        "summary": "Create a thread and run it in one request.",
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createThreadAndRunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a thread and run it.": {
            "$ref": "./examples/create_thread_and_run.json"
          }
        }
      }
    },
    "/threads/{thread_id}/runs": {
      "get": {
        "operationId": "List_Runs",
        "tags": [
          "Assistants"
        ],
        "summary": "Returns a list of runs belonging to a thread.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread the run belongs to."
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "x-ms-enum": {
                "name": "ListRunsOrder",
                "modelAsString": true,
                "values": [
                  {
                    "value": "asc",
                    "description": "Order results in ascending order"
                  },
                  {
                    "value": "desc",
                    "description": "Order results in descending order"
                  }
                ]
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listRunsResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "List all runs.": {
            "$ref": "./examples/list_runs.json"
          }
        }
      },
      "post": {
        "operationId": "Create_Run",
        "tags": [
          "Assistants"
        ],
        "summary": "Create a run.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread to run."
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "step_details.tool_calls[*].file_search.results[*].content"
                ],
                "x-ms-enum": {
                  "name": "Include",
                  "modelAsString": true,
                  "values": [
                    {
                      "value": "step_details.tool_calls[*].file_search.results[*].content"
                    }
                  ]
                }
              }
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createRunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a run.": {
            "$ref": "./examples/create_run.json"
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}": {
      "get": {
        "operationId": "Get_Run",
        "tags": [
          "Assistants"
        ],
        "summary": "Retrieves a run.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the [thread](/docs/api-reference/threads) that was run."
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the run to retrieve."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieve a run.": {
            "$ref": "./examples/get_run.json"
          }
        }
      },
      "post": {
        "operationId": "Modify_Run",
        "tags": [
          "Assistants"
        ],
        "summary": "Modifies a run.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the [thread](/docs/api-reference/threads) that was run."
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the run to modify."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/modifyRunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Modify a run.": {
            "$ref": "./examples/modify_run.json"
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs": {
      "post": {
        "operationId": "Submit_Tool_Outputs_To_Run",
        "tags": [
          "Assistants"
        ],
        "summary": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the [thread](/docs/api-reference/threads) to which this run belongs."
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the run that requires the tool output submission."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/submitToolOutputsRunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Submit tool outputs to a run.": {
            "$ref": "./examples/submit_tool_outputs_to_run.json"
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}/cancel": {
      "post": {
        "operationId": "Cancel_Run",
        "tags": [
          "Assistants"
        ],
        "summary": "Cancels a run that is `in_progress`.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread to which this run belongs."
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the run to cancel."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Cancel a run.": {
            "$ref": "./examples/cancel_run.json"
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}/steps": {
      "get": {
        "operationId": "List_Run_Steps",
        "tags": [
          "Assistants"
        ],
        "summary": "Returns a list of run steps belonging to a run.",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread the run and run steps belong to."
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the run the run steps belong to."
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "x-ms-enum": {
                "name": "ListRunStepsOrder",
                "modelAsString": true,
                "values": [
                  {
                    "value": "asc",
                    "description": "Order results in ascending order"
                  },
                  {
                    "value": "desc",
                    "description": "Order results in descending order"
                  }
                ]
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "step_details.tool_calls[*].file_search.results[*].content"
                ],
                "x-ms-enum": {
                  "name": "Include",
                  "modelAsString": true,
                  "values": [
                    {
                      "value": "step_details.tool_calls[*].file_search.results[*].content"
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listRunStepsResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "List all run steps.": {
            "$ref": "./examples/list_run_steps.json"
          }
        }
      }
    },
    "/threads/{thread_id}/runs/{run_id}/steps/{step_id}": {
      "get": {
        "operationId": "Get_Run_Step",
        "tags": [
          "Assistants"
        ],
        "summary": "Retrieves a run step.",
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the thread to which the run and run step belongs."
          },
          {
            "in": "path",
            "name": "run_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the run to which the run step belongs."
          },
          {
            "in": "path",
            "name": "step_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the run step to retrieve."
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "step_details.tool_calls[*].file_search.results[*].content"
                ],
                "x-ms-enum": {
                  "name": "Include",
                  "modelAsString": true,
                  "values": [
                    {
                      "value": "step_details.tool_calls[*].file_search.results[*].content"
                    }
                  ]
                }
              }
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview",
              "description": "api version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runStepObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieve a run step.": {
            "$ref": "./examples/get_run_step.json"
          }
        }
      }
    },
    "/vector_stores": {
      "get": {
        "operationId": "List_Vector_Stores",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Returns a list of vector stores.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "x-ms-enum": {
                "name": "ListVectorStoresOrder",
                "modelAsString": true,
                "values": [
                  {
                    "value": "asc"
                  },
                  {
                    "value": "desc"
                  }
                ]
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listVectorStoresResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "List all vector stores.": {
            "$ref": "./examples/list_vector_stores.json"
          }
        }
      },
      "post": {
        "operationId": "Create_Vector_Store",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Create a vector store.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createVectorStoreRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vectorStoreObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a vector store.": {
            "$ref": "./examples/create_vector_store.json"
          }
        }
      }
    },
    "/vector_stores/{vector_store_id}": {
      "get": {
        "operationId": "Get_Vector_Store",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Retrieves a vector store.",
        "parameters": [
          {
            "in": "path",
            "name": "vector_store_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector store to retrieve."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vectorStoreObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieve a vector store.": {
            "$ref": "./examples/retrieve_vector_store.json"
          }
        }
      },
      "post": {
        "operationId": "Modify_Vector_Store",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Modifies a vector store.",
        "parameters": [
          {
            "in": "path",
            "name": "vector_store_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector store to modify."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateVectorStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vectorStoreObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Modify a vector store.": {
            "$ref": "./examples/modify_vector_store.json"
          }
        }
      },
      "delete": {
        "operationId": "Delete_Vector_Store",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Delete a vector store.",
        "parameters": [
          {
            "in": "path",
            "name": "vector_store_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector store to delete."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteVectorStoreResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete a vector store.": {
            "$ref": "./examples/delete_vector_store.json"
          }
        }
      }
    },
    "/vector_stores/{vector_store_id}/files": {
      "get": {
        "operationId": "List_Vector_Store_Files",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Returns a list of vector store files.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "description": "The ID of the vector store that the files belong to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "x-ms-enum": {
                "name": "ListVectorStoreFilesOrder",
                "modelAsString": true,
                "values": [
                  {
                    "value": "asc"
                  },
                  {
                    "value": "desc"
                  }
                ]
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.",
            "schema": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "failed",
                "cancelled"
              ],
              "x-ms-enum": {
                "name": "ListVectorStoreFilesFilter",
                "modelAsString": true,
                "values": [
                  {
                    "value": "in_progress"
                  },
                  {
                    "value": "completed"
                  },
                  {
                    "value": "failed"
                  },
                  {
                    "value": "cancelled"
                  }
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listVectorStoreFilesResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "List all vector store files.": {
            "$ref": "./examples/list_vector_store_files.json"
          }
        }
      },
      "post": {
        "operationId": "Create_Vector_Store_File",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).",
        "parameters": [
          {
            "in": "path",
            "name": "vector_store_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            },
            "description": "The ID of the vector store for which to create a File.\n"
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createVectorStoreFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vectorStoreFileObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a vector store file.": {
            "$ref": "./examples/create_vector_store_file.json"
          }
        }
      }
    },
    "/vector_stores/{vector_store_id}/files/{file_id}": {
      "get": {
        "operationId": "Get_Vector_Store_File",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Retrieves a vector store file.",
        "parameters": [
          {
            "in": "path",
            "name": "vector_store_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            },
            "description": "The ID of the vector store that the file belongs to."
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "file-abc123"
            },
            "description": "The ID of the file being retrieved."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vectorStoreFileObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieve a vector store file.": {
            "$ref": "./examples/retrieve_vector_store_file.json"
          }
        }
      },
      "delete": {
        "operationId": "Delete_Vector_Store_File",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.",
        "parameters": [
          {
            "in": "path",
            "name": "vector_store_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector store that the file belongs to."
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the file to delete."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteVectorStoreFileResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete a vector store file.": {
            "$ref": "./examples/delete_vector_store_file.json"
          }
        }
      }
    },
    "/vector_stores/{vector_store_id}/file_batches": {
      "post": {
        "operationId": "Create_Vector_Store_File_Batch",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Create a vector store file batch.",
        "parameters": [
          {
            "in": "path",
            "name": "vector_store_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            },
            "description": "The ID of the vector store for which to create a File Batch.\n"
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createVectorStoreFileBatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vectorStoreFileBatchObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Create a vector store file batch.": {
            "$ref": "./examples/create_vector_store_file_batch.json"
          }
        }
      }
    },
    "/vector_stores/{vector_store_id}/file_batches/{batch_id}": {
      "get": {
        "operationId": "Get_Vector_Store_File_Batch",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Retrieves a vector store file batch.",
        "parameters": [
          {
            "in": "path",
            "name": "vector_store_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vs_abc123"
            },
            "description": "The ID of the vector store that the file batch belongs to."
          },
          {
            "in": "path",
            "name": "batch_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vs_b_abc123"
            },
            "description": "The ID of the file batch being retrieved."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vectorStoreFileBatchObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Retrieve a vector store file batch.": {
            "$ref": "./examples/retrieve_vector_store_file_batch.json"
          }
        }
      }
    },
    "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel": {
      "post": {
        "operationId": "Cancel_Vector_Store_File_Batch",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.",
        "parameters": [
          {
            "in": "path",
            "name": "vector_store_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the vector store that the file batch belongs to."
          },
          {
            "in": "path",
            "name": "batch_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the file batch to cancel."
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vectorStoreFileBatchObject"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Cancel a vector store file batch.": {
            "$ref": "./examples/cancel_vector_store_file_batch.json"
          }
        }
      }
    },
    "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files": {
      "get": {
        "operationId": "List_Vector_Store_File_Batch_Files",
        "tags": [
          "Vector Stores"
        ],
        "summary": "Returns a list of vector store files in a batch.",
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "description": "The ID of the vector store that the files belong to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "batch_id",
            "in": "path",
            "description": "The ID of the file batch that the files belong to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "x-ms-enum": {
                "name": "ListVectorStoreFilesOrder",
                "modelAsString": true,
                "values": [
                  {
                    "value": "asc"
                  },
                  {
                    "value": "desc"
                  }
                ]
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.",
            "schema": {
              "type": "string",
              "enum": [
                "in_progress",
                "completed",
                "failed",
                "cancelled"
              ],
              "x-ms-enum": {
                "name": "ListVectorStoreFilesFilter",
                "modelAsString": true,
                "values": [
                  {
                    "value": "in_progress"
                  },
                  {
                    "value": "completed"
                  },
                  {
                    "value": "failed"
                  },
                  {
                    "value": "cancelled"
                  }
                ]
              }
            }
          },
          {
            "in": "query",
            "name": "api-version",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-01-preview"
            },
            "description": "api version"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listVectorStoreFilesResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "List all vector store files in a batch.": {
            "$ref": "./examples/list_vector_store_files.json"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "errorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "errorBase": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "error": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/errorBase"
          }
        ],
        "properties": {
          "param": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "inner_error": {
            "$ref": "#/components/schemas/innerError"
          }
        }
      },
      "innerError": {
        "description": "Inner error with additional details.",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/innerErrorCode"
          },
          "content_filter_results": {
            "$ref": "#/components/schemas/contentFilterPromptResults"
          }
        }
      },
      "innerErrorCode": {
        "description": "Error codes for the inner error object.",
        "enum": [
          "ResponsibleAIPolicyViolation"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "InnerErrorCode",
          "modelAsString": true,
          "values": [
            {
              "value": "ResponsibleAIPolicyViolation",
              "description": "The prompt violated one of more content filter rules."
            }
          ]
        }
      },
      "dalleErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/dalleError"
          }
        }
      },
      "dalleError": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/errorBase"
          }
        ],
        "properties": {
          "param": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "inner_error": {
            "$ref": "#/components/schemas/dalleInnerError"
          }
        }
      },
      "dalleInnerError": {
        "description": "Inner error with additional details.",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/innerErrorCode"
          },
          "content_filter_results": {
            "$ref": "#/components/schemas/dalleFilterResults"
          },
          "revised_prompt": {
            "type": "string",
            "description": "The prompt that was used to generate the image, if there was any revision to the prompt."
          }
        }
      },
      "contentFilterCompletionTextSpan": {
        "type": "object",
        "description": "Describes a span within generated completion text.  Offset 0 is the first UTF32 code point of the completion text.",
        "properties": {
          "completion_start_offset": {
            "description": "Offset of the UTF32 code point which begins the span.",
            "type": "integer"
          },
          "completion_end_offset": {
            "description": "Offset of the first UTF32 code point which is excluded from the span. This field is always equal to completion_start_offset for empty spans. This field is always larger than completion_start_offset for non-empty spans.",
            "type": "integer"
          }
        },
        "required": [
          "completion_start_offset",
          "completion_end_offset"
        ]
      },
      "contentFilterResultBase": {
        "type": "object",
        "properties": {
          "filtered": {
            "type": "boolean"
          }
        },
        "required": [
          "filtered"
        ]
      },
      "contentFilterSeverityResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/contentFilterResultBase"
          },
          {
            "properties": {
              "severity": {
                "type": "string",
                "enum": [
                  "safe",
                  "low",
                  "medium",
                  "high"
                ],
                "x-ms-enum": {
                  "name": "ContentFilterSeverity",
                  "modelAsString": true,
                  "values": [
                    {
                      "value": "safe",
                      "description": "General content or related content in generic or non-harmful contexts."
                    },
                    {
                      "value": "low",
                      "description": "Harmful content at a low intensity and risk level."
                    },
                    {
                      "value": "medium",
                      "description": "Harmful content at a medium intensity and risk level."
                    },
                    {
                      "value": "high",
                      "description": "Harmful content at a high intensity and risk level."
                    }
                  ]
                }
              }
            }
          }
        ],
        "required": [
          "severity",
          "filtered"
        ]
      },
      "contentFilterDetectedResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/contentFilterResultBase"
          },
          {
            "properties": {
              "detected": {
                "type": "boolean"
              }
            }
          }
        ],
        "required": [
          "detected",
          "filtered"
        ]
      },
      "contentFilterDetectedWithCitationResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/contentFilterDetectedResult"
          },
          {
            "properties": {
              "citation": {
                "type": "object",
                "properties": {
                  "URL": {
                    "type": "string"
                  },
                  "license": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "required": [
          "detected",
          "filtered"
        ]
      },
      "contentFilterDetectedWithCompletionTextSpansResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/contentFilterDetectedResult"
          },
          {
            "properties": {
              "details": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/contentFilterCompletionTextSpan"
                }
              }
            }
          }
        ],
        "required": [
          "detected",
          "filtered",
          "details"
        ]
      },
      "contentFilterIdResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/contentFilterResultBase"
          },
          {
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        ],
        "required": [
          "id",
          "filtered"
        ]
      },
      "contentFilterResultsBase": {
        "type": "object",
        "description": "Information about the content filtering results.",
        "properties": {
          "sexual": {
            "$ref": "#/components/schemas/contentFilterSeverityResult"
          },
          "violence": {
            "$ref": "#/components/schemas/contentFilterSeverityResult"
          },
          "hate": {
            "$ref": "#/components/schemas/contentFilterSeverityResult"
          },
          "self_harm": {
            "$ref": "#/components/schemas/contentFilterSeverityResult"
          },
          "profanity": {
            "$ref": "#/components/schemas/contentFilterDetectedResult"
          },
          "custom_blocklists": {
            "$ref": "#/components/schemas/contentFilterDetailedResults"
          },
          "error": {
            "$ref": "#/components/schemas/errorBase"
          }
        }
      },
      "contentFilterPromptResults": {
        "type": "object",
        "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.",
        "allOf": [
          {
            "$ref": "#/components/schemas/contentFilterResultsBase"
          },
          {
            "properties": {
              "jailbreak": {
                "$ref": "#/components/schemas/contentFilterDetectedResult"
              },
              "indirect_attack": {
                "$ref": "#/components/schemas/contentFilterDetectedResult"
              }
            }
          }
        ]
      },
      "contentFilterChoiceResults": {
        "type": "object",
        "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about third party text and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.",
        "allOf": [
          {
            "$ref": "#/components/schemas/contentFilterResultsBase"
          },
          {
            "properties": {
              "protected_material_text": {
                "$ref": "#/components/schemas/contentFilterDetectedResult"
              }
            }
          },
          {
            "properties": {
              "protected_material_code": {
                "$ref": "#/components/schemas/contentFilterDetectedWithCitationResult"
              }
            }
          },
          {
            "properties": {
              "ungrounded_material": {
                "$ref": "#/components/schemas/contentFilterDetectedWithCompletionTextSpansResult"
              }
            }
          }
        ]
      },
      "contentFilterDetailedResults": {
        "type": "object",
        "description": "Content filtering results with a detail of content filter ids for the filtered segments.",
        "allOf": [
          {
            "$ref": "#/components/schemas/contentFilterResultBase"
          },
          {
            "properties": {
              "details": {
                "items": {
                  "$ref": "#/components/schemas/contentFilterIdResult"
                },
                "type": "array"
              }
            }
          }
        ],
        "required": [
          "filtered",
          "details"
        ]
      },
      "promptFilterResult": {
        "type": "object",
        "description": "Content filtering results for a single prompt in the request.",
        "properties": {
          "prompt_index": {
            "type": "integer"
          },
          "content_filter_results": {
            "$ref": "#/components/schemas/contentFilterPromptResults"
          }
        }
      },
      "promptFilterResults": {
        "type": "array",
        "description": "Content filtering results for zero or more prompts in the request. In a streaming request, results for different prompts may arrive at different times or in different orders.",
        "items": {
          "$ref": "#/components/schemas/promptFilterResult"
        }
      },
      "dalleContentFilterResults": {
        "type": "object",
        "description": "Information about the content filtering results.",
        "properties": {
          "sexual": {
            "$ref": "#/components/schemas/contentFilterSeverityResult"
          },
          "violence": {
            "$ref": "#/components/schemas/contentFilterSeverityResult"
          },
          "hate": {
            "$ref": "#/components/schemas/contentFilterSeverityResult"
          },
          "self_harm": {
            "$ref": "#/components/schemas/contentFilterSeverityResult"
          }
        }
      },
      "dalleFilterResults": {
        "type": "object",
        "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.",
        "allOf": [
          {
            "$ref": "#/components/schemas/dalleContentFilterResults"
          },
          {
            "properties": {
              "profanity": {
                "$ref": "#/components/schemas/contentFilterDetectedResult"
              },
              "jailbreak": {
                "$ref": "#/components/schemas/contentFilterDetectedResult"
              },
              "custom_blocklists": {
                "$ref": "#/components/schemas/contentFilterDetailedResults"
              }
            }
          }
        ]
      },
      "chatCompletionsRequestCommon": {
        "type": "object",
        "properties": {
          "temperature": {
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.",
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true
          },
          "top_p": {
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or `temperature` but not both.",
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true
          },
          "stream": {
            "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens.",
            "oneOf": [
              {
                "type": "string",
                "nullable": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "nullable": false
                },
                "minItems": 1,
                "maxItems": 4,
                "description": "Array minimum size of 1 and maximum of 4"
              }
            ],
            "default": null
          },
          "max_tokens": {
            "description": "The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens). This is not compatible with o1 series models.",
            "type": "integer",
            "default": 4096
          },
          "max_completion_tokens": {
            "description": "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens. This is only supported in o1 series models. Will expand the support to other models in future API release.",
            "type": "integer",
            "nullable": true
          },
          "presence_penalty": {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "frequency_penalty": {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2
          },
          "logit_bias": {
            "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
            "type": "object",
            "nullable": true
          },
          "store": {
            "description": "Whether or not to store the output of this chat completion request for use in our model distillation or evaluation products.",
            "type": "boolean",
            "nullable": true
          },
          "metadata": {
            "description": "Developer-defined tags and values used for filtering completions in the stored completions dashboard.",
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "user": {
            "description": "A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.",
            "type": "string",
            "example": "user-1234",
            "nullable": false
          }
        }
      },
      "createCompletionRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n",
            "default": "<|endoftext|>",
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "default": "",
                "example": "This is a test."
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "",
                  "example": "This is a test."
                }
              }
            ]
          },
          "best_of": {
            "type": "integer",
            "default": 1,
            "minimum": 0,
            "maximum": 20,
            "nullable": true,
            "description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
          },
          "echo": {
            "type": "boolean",
            "default": false,
            "nullable": true,
            "description": "Echo back the prompt in addition to the completion\n"
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n"
          },
          "logit_bias": {
            "type": "object",
            "x-oaiTypeLabel": "map",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](https://platform.openai.com/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n"
          },
          "logprobs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "default": null,
            "nullable": true,
            "description": "Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n"
          },
          "max_tokens": {
            "type": "integer",
            "minimum": 0,
            "default": 16,
            "example": 16,
            "nullable": true,
            "description": "The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n"
          },
          "n": {
            "type": "integer",
            "minimum": 1,
            "maximum": 128,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
          },
          "modalities": {
            "$ref": "#/components/schemas/ChatCompletionModalities"
          },
          "prediction": {
            "nullable": true,
            "x-oaiExpandable": true,
            "description": "Configuration for a [Predicted Output](/docs/guides/predicted-outputs), which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PredictionContent"
              }
            ]
          },
          "audio": {
            "type": "object",
            "description": "Parameters for audio output. Required when audio output is requested with\n`modalities: [\"audio\"]`. [Learn more](/docs/guides/audio).\n",
            "required": [
              "voice",
              "format"
            ],
            "x-oaiExpandable": true,
            "properties": {
              "voice": {
                "type": "string",
                "enum": [
                  "alloy",
                  "echo",
                  "fable",
                  "onyx",
                  "nova",
                  "shimmer"
                ],
                "description": "Specifies the voice type. Supported voices are `alloy`, `echo`, \n`fable`, `onyx`, `nova`, and `shimmer`.\n"
              },
              "format": {
                "type": "string",
                "enum": [
                  "wav",
                  "mp3",
                  "flac",
                  "opus",
                  "pcm16"
                ],
                "description": "Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,\n`opus`, or `pcm16`. \n"
              }
            }
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n"
          },
          "seed": {
            "type": "integer",
            "minimum": -9223372036854775808,
            "maximum": 9223372036854775807,
            "nullable": true,
            "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\n\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n",
            "default": null,
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "default": "<|endoftext|>",
                "example": "\n",
                "nullable": true
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                  "type": "string",
                  "example": "[\"\\n\"]"
                }
              }
            ]
          },
          "stream": {
            "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "suffix": {
            "description": "The suffix that comes after a completion of inserted text.\n\nThis parameter is only supported for `gpt-3.5-turbo-instruct`.\n",
            "default": null,
            "nullable": true,
            "type": "string",
            "example": "test."
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
          },
          "top_p": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
          },
          "user": {
            "type": "string",
            "example": "user-1234",
            "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.\n"
          }
        },
        "required": [
          "prompt"
        ]
      },
      "createCompletionResponse": {
        "type": "object",
        "description": "Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the completion."
          },
          "choices": {
            "type": "array",
            "description": "The list of completion choices the model generated for the input prompt.",
            "items": {
              "type": "object",
              "required": [
                "finish_reason",
                "index",
                "logprobs",
                "text"
              ],
              "properties": {
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n",
                  "enum": [
                    "stop",
                    "length",
                    "content_filter"
                  ]
                },
                "index": {
                  "type": "integer"
                },
                "logprobs": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "text_offset": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "token_logprobs": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "tokens": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "top_logprobs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "text": {
                  "type": "string"
                },
                "content_filter_results": {
                  "$ref": "#/components/schemas/contentFilterChoiceResults"
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model used for completion."
          },
          "prompt_filter_results": {
            "$ref": "#/components/schemas/promptFilterResults"
          },
          "system_fingerprint": {
            "type": "string",
            "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"text_completion\"",
            "enum": [
              "text_completion"
            ]
          },
          "usage": {
            "$ref": "#/components/schemas/completionUsage"
          }
        },
        "required": [
          "id",
          "object",
          "created",
          "model",
          "choices"
        ]
      },
      "createChatCompletionRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/chatCompletionsRequestCommon"
          },
          {
            "properties": {
              "messages": {
                "description": "A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).",
                "type": "array",
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestMessage"
                }
              },
              "data_sources": {
                "type": "array",
                "description": "  The configuration entries for Azure OpenAI chat extensions that use them.\n  This additional specification is only compatible with Azure OpenAI.",
                "items": {
                  "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                }
              },
              "reasoning_effort": {
                "type": "string",
                "description": "**o1 models only** \n\n Constrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\nCurrently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.",
                "enum": [
                  "low",
                  "medium",
                  "high"
                ],
                "default": "medium"
              },
              "frequency_penalty": {
                "type": "number",
                "default": 0,
                "minimum": -2,
                "maximum": 2,
                "nullable": true,
                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n"
              },
              "logit_bias": {
                "type": "object",
                "default": null,
                "nullable": true,
                "additionalProperties": {
                  "type": "integer"
                },
                "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n"
              },
              "logprobs": {
                "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
                "type": "boolean",
                "default": false,
                "nullable": true
              },
              "top_logprobs": {
                "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
                "type": "integer",
                "minimum": 0,
                "maximum": 20,
                "nullable": true
              },
              "max_tokens": {
                "description": "The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
                "type": "integer",
                "nullable": true
              },
              "n": {
                "type": "integer",
                "minimum": 1,
                "maximum": 128,
                "default": 1,
                "example": 1,
                "nullable": true,
                "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs."
              },
              "presence_penalty": {
                "type": "number",
                "default": 0,
                "minimum": -2,
                "maximum": 2,
                "nullable": true,
                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n"
              },
              "parallel_tool_calls": {
                "$ref": "#/components/schemas/ParallelToolCalls",
                "nullable": true
              },
              "response_format": {
                "description": "An object specifying the format that the model must output. Compatible with [GPT-4o](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models), [GPT-4o mini](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models), [GPT-4 Turbo](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models) and all [GPT-3.5](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-35) Turbo models newer than `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which guarantees the model will match your supplied JSON schema.\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ResponseFormatText"
                  },
                  {
                    "$ref": "#/components/schemas/ResponseFormatJsonObject"
                  },
                  {
                    "$ref": "#/components/schemas/ResponseFormatJsonSchema"
                  }
                ],
                "x-oaiExpandable": true
              },
              "seed": {
                "type": "integer",
                "minimum": -9223372036854775808,
                "maximum": 9223372036854775807,
                "nullable": true,
                "description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
              },
              "stop": {
                "description": "Up to 4 sequences where the API will stop generating further tokens.\n",
                "default": null,
                "oneOf": [
                  {
                    "type": "string",
                    "nullable": true
                  },
                  {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 4,
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "stream": {
                "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
                "type": "boolean",
                "nullable": true,
                "default": false
              },
              "stream_options": {
                "$ref": "#/components/schemas/chatCompletionStreamOptions",
                "nullable": true
              },
              "temperature": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "default": 1,
                "example": 1,
                "nullable": true,
                "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
              },
              "top_p": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 1,
                "example": 1,
                "nullable": true,
                "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
              },
              "tools": {
                "type": "array",
                "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionTool"
                }
              },
              "tool_choice": {
                "$ref": "#/components/schemas/chatCompletionToolChoiceOption"
              },
              "function_call": {
                "deprecated": true,
                "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.\n",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
                    "enum": [
                      "none",
                      "auto"
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/chatCompletionFunctionCallOption"
                  }
                ],
                "x-oaiExpandable": true
              },
              "functions": {
                "deprecated": true,
                "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n",
                "type": "array",
                "minItems": 1,
                "maxItems": 128,
                "items": {
                  "$ref": "#/components/schemas/chatCompletionFunctions"
                }
              },
              "user": {
                "type": "string",
                "example": "user-1234",
                "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.\n"
              },
              "user_security_context": {
                "$ref": "#/components/schemas/userSecurityContext"
              }
            },
            "required": [
              "messages"
            ]
          }
        ]
      },
      "userSecurityContext": {
        "type": "object",
        "description": "User security context contains several parameters that describe the AI application itself, and the end user that interacts with the AI application. These fields assist your security operations teams to investigate and mitigate security incidents by providing a comprehensive approach to protecting your AI applications. [Learn more](https://aka.ms/TP4AI/Documentation/EndUserContext) about protecting AI applications using Microsoft Defender for Cloud.",
        "properties": {
          "application_name": {
            "type": "string",
            "description": "The name of the application. Sensitive personal information should not be included in this field."
          },
          "end_user_id": {
            "type": "string",
            "format": "uuid",
            "description": "This identifier is the Microsoft Entra ID (formerly Azure Active Directory) user object ID used to authenticate end-users within the generative AI application. Sensitive personal information should not be included in this field."
          },
          "end_user_tenant_id": {
            "type": "string",
            "format": "uuid",
            "description": "The Microsoft 365 tenant ID the end user belongs to. It's required when the generative AI application is multi tenant."
          },
          "source_ip": {
            "type": "string",
            "description": "Captures the original client's IP address, accepting both IPv4 and IPv6 formats."
          }
        }
      },
      "chatCompletionFunctions": {
        "type": "object",
        "deprecated": true,
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters"
          }
        },
        "required": [
          "name"
        ]
      },
      "chatCompletionFunctionCallOption": {
        "type": "object",
        "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "required": [
          "name"
        ]
      },
      "chatCompletionFunctionParameters": {
        "type": "object",
        "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide/](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.",
        "additionalProperties": true
      },
      "chatCompletionRequestMessage": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ChatCompletionRequestDeveloperMessage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestSystemMessage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestUserMessage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestAssistantMessage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestToolMessage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestFunctionMessage"
          }
        ]
      },
      "ChatCompletionRequestDeveloperMessage": {
        "type": "object",
        "title": "Developer message",
        "description": "Developer-provided instructions that the model should follow, regardless of messages sent by the user.\nWith o1 models and newer, `developer` messages replace the previous `system` messages.",
        "properties": {
          "content": {
            "description": "The contents of the developer message.",
            "oneOf": [
              {
                "type": "string",
                "description": "The contents of the developer message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. For developer messages, only type `text` is supported.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestDeveloperMessageContentPart"
                },
                "minItems": 1
              }
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "developer"
            ],
            "description": "The role of the messages author, in this case `developer`."
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "chatCompletionRequestSystemMessage": {
        "type": "object",
        "title": "System message",
        "properties": {
          "content": {
            "description": "The contents of the system message.",
            "oneOf": [
              {
                "type": "string",
                "description": "The contents of the system message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. For system messages, only type `text` is supported.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestSystemMessageContentPart"
                },
                "minItems": 1
              }
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "system"
            ],
            "description": "The role of the messages author, in this case `system`."
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "chatCompletionRequestUserMessage": {
        "type": "object",
        "title": "User message",
        "properties": {
          "content": {
            "description": "The contents of the user message.\n",
            "oneOf": [
              {
                "type": "string",
                "description": "The text contents of the message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4o` model.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestUserMessageContentPart"
                },
                "minItems": 1
              }
            ],
            "x-oaiExpandable": true
          },
          "role": {
            "type": "string",
            "enum": [
              "user"
            ],
            "description": "The role of the messages author, in this case `user`."
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "chatCompletionRequestAssistantMessage": {
        "type": "object",
        "title": "Assistant message",
        "properties": {
          "content": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "description": "The contents of the assistant message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestAssistantMessageContentPart"
                },
                "minItems": 1
              }
            ],
            "description": "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n"
          },
          "refusal": {
            "nullable": true,
            "type": "string",
            "description": "The refusal message by the assistant."
          },
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "description": "The role of the messages author, in this case `assistant`."
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          },
          "tool_calls": {
            "$ref": "#/components/schemas/chatCompletionMessageToolCalls"
          },
          "function_call": {
            "type": "object",
            "deprecated": true,
            "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
            "nullable": true,
            "properties": {
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              },
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            },
            "required": [
              "arguments",
              "name"
            ]
          }
        },
        "required": [
          "role"
        ]
      },
      "chatCompletionRequestToolMessage": {
        "type": "object",
        "title": "Tool message",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "tool"
            ],
            "description": "The role of the messages author, in this case `tool`."
          },
          "content": {
            "oneOf": [
              {
                "type": "string",
                "description": "The contents of the tool message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. For tool messages, only type `text` is supported.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/chatCompletionRequestToolMessageContentPart"
                },
                "minItems": 1
              }
            ],
            "description": "The contents of the tool message."
          },
          "tool_call_id": {
            "type": "string",
            "description": "Tool call that this message is responding to."
          }
        },
        "required": [
          "role",
          "content",
          "tool_call_id"
        ]
      },
      "chatCompletionRequestFunctionMessage": {
        "type": "object",
        "title": "Function message",
        "deprecated": true,
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The role of the messages author, in this case `function`."
          },
          "content": {
            "nullable": true,
            "type": "string",
            "description": "The contents of the function message."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "required": [
          "role",
          "content",
          "name"
        ]
      },
      "chatCompletionRequestDeveloperMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
          }
        ]
      },
      "chatCompletionRequestSystemMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
          }
        ]
      },
      "chatCompletionRequestUserMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartImage"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartAudio"
          }
        ]
      },
      "chatCompletionRequestAssistantMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
          },
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartRefusal"
          }
        ]
      },
      "chatCompletionRequestToolMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
          }
        ]
      },
      "chatCompletionRequestMessageContentPartText": {
        "type": "object",
        "title": "Text content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "description": "The type of the content part."
          },
          "text": {
            "type": "string",
            "description": "The text content."
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "chatCompletionRequestMessageContentPartAudio": {
        "type": "object",
        "title": "Audio content part",
        "description": "Learn about [audio inputs](/docs/guides/audio).\n",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "input_audio"
            ],
            "description": "The type of the content part. Always `input_audio`."
          },
          "input_audio": {
            "type": "object",
            "properties": {
              "data": {
                "type": "string",
                "description": "Base64 encoded audio data."
              },
              "format": {
                "type": "string",
                "enum": [
                  "wav",
                  "mp3"
                ],
                "description": "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".\n"
              }
            },
            "required": [
              "data",
              "format"
            ]
          }
        },
        "required": [
          "type",
          "input_audio"
        ]
      },
      "chatCompletionRequestMessageContentPartImage": {
        "type": "object",
        "title": "Image content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_url"
            ],
            "description": "The type of the content part."
          },
          "image_url": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "Either a URL of the image or the base64 encoded image data.",
                "format": "uri"
              },
              "detail": {
                "type": "string",
                "description": "Specifies the detail level of the image. Learn more in the [Vision guide](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/gpt-with-vision?tabs=rest%2Csystem-assigned%2Cresource#detail-parameter-settings-in-image-processing-low-high-auto).",
                "enum": [
                  "auto",
                  "low",
                  "high"
                ],
                "default": "auto"
              }
            },
            "required": [
              "url"
            ]
          }
        },
        "required": [
          "type",
          "image_url"
        ]
      },
      "chatCompletionRequestMessageContentPartRefusal": {
        "type": "object",
        "title": "Refusal content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "refusal"
            ],
            "description": "The type of the content part."
          },
          "refusal": {
            "type": "string",
            "description": "The refusal message generated by the model."
          }
        },
        "required": [
          "type",
          "refusal"
        ]
      },
      "azureChatExtensionConfiguration": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/azureChatExtensionType"
          }
        },
        "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "azure_search": "#/components/schemas/azureSearchChatExtensionConfiguration",
            "azure_cosmos_db": "#/components/schemas/azureCosmosDBChatExtensionConfiguration",
            "elasticsearch": "#/components/schemas/elasticsearchChatExtensionConfiguration",
            "mongo_db": "#/components/schemas/mongoDBChatExtensionConfiguration",
            "pinecone": "#/components/schemas/pineconeChatExtensionConfiguration"
          }
        }
      },
      "azureChatExtensionType": {
        "type": "string",
        "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
        "enum": [
          "azure_search",
          "azure_cosmos_db",
          "elasticsearch",
          "mongo_db",
          "pinecone"
        ],
        "x-ms-enum": {
          "name": "AzureChatExtensionType",
          "modelAsString": true,
          "values": [
            {
              "name": "azureSearch",
              "value": "azure_search",
              "description": "Represents the use of Azure Search as an Azure OpenAI chat extension."
            },
            {
              "name": "azureCosmosDB",
              "value": "azure_cosmos_db",
              "description": "Represents the use of Azure Cosmos DB as an Azure OpenAI chat extension."
            },
            {
              "name": "elasticsearch",
              "value": "elasticsearch",
              "description": "Represents the use of Elasticsearch® index as an Azure OpenAI chat extension."
            },
            {
              "name": "mongoDB",
              "value": "mongo_db",
              "description": "Represents the use of Mongo DB as an Azure OpenAI chat extension."
            },
            {
              "name": "pinecone",
              "value": "pinecone",
              "description": "Represents the use of Pinecone index as an Azure OpenAI chat extension."
            }
          ]
        }
      },
      "azureSearchChatExtensionConfiguration": {
        "required": [
          "parameters"
        ],
        "description": "A specific representation of configurable options for Azure Search when using it as an Azure OpenAI chat\nextension.",
        "allOf": [
          {
            "$ref": "#/components/schemas/azureChatExtensionConfiguration"
          },
          {
            "properties": {
              "parameters": {
                "$ref": "#/components/schemas/azureSearchChatExtensionParameters"
              }
            }
          }
        ],
        "x-ms-discriminator-value": "azure_search"
      },
      "azureSearchChatExtensionParameters": {
        "required": [
          "authentication",
          "endpoint",
          "index_name"
        ],
        "type": "object",
        "properties": {
          "authentication": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
              },
              {
                "$ref": "#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions"
              },
              {
                "$ref": "#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions"
              },
              {
                "$ref": "#/components/schemas/onYourDataAccessTokenAuthenticationOptions"
              }
            ]
          },
          "top_n_documents": {
            "type": "integer",
            "description": "The configured top number of documents to feature for the configured query.",
            "format": "int32"
          },
          "max_search_queries": {
            "type": "integer",
            "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
            "format": "int32"
          },
          "allow_partial_result": {
            "type": "boolean",
            "default": false,
            "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails."
          },
          "in_scope": {
            "type": "boolean",
            "description": "Whether queries should be restricted to use of indexed data."
          },
          "strictness": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
            "format": "int32"
          },
          "endpoint": {
            "type": "string",
            "description": "The absolute endpoint path for the Azure Search resource to use.",
            "format": "uri"
          },
          "index_name": {
            "type": "string",
            "description": "The name of the index to use as available in the referenced Azure Search resource."
          },
          "fields_mapping": {
            "$ref": "#/components/schemas/azureSearchIndexFieldMappingOptions"
          },
          "query_type": {
            "$ref": "#/components/schemas/azureSearchQueryType"
          },
          "semantic_configuration": {
            "type": "string",
            "description": "The additional semantic configuration for the query."
          },
          "filter": {
            "type": "string",
            "description": "Search filter."
          },
          "embedding_dependency": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
              },
              {
                "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
              },
              {
                "$ref": "#/components/schemas/onYourDataIntegratedVectorizationSource"
              }
            ]
          },
          "include_contexts": {
            "type": "array",
            "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`.",
            "items": {
              "$ref": "#/components/schemas/onYourDataContextProperty"
            }
          }
        },
        "description": "Parameters for Azure Search when used as an Azure OpenAI chat extension."
      },
      "azureSearchIndexFieldMappingOptions": {
        "type": "object",
        "properties": {
          "title_field": {
            "type": "string",
            "description": "The name of the index field to use as a title."
          },
          "url_field": {
            "type": "string",
            "description": "The name of the index field to use as a URL."
          },
          "filepath_field": {
            "type": "string",
            "description": "The name of the index field to use as a filepath."
          },
          "content_fields": {
            "type": "array",
            "description": "The names of index fields that should be treated as content.",
            "items": {
              "type": "string"
            }
          },
          "content_fields_separator": {
            "type": "string",
            "description": "The separator pattern that content fields should use."
          },
          "vector_fields": {
            "type": "array",
            "description": "The names of fields that represent vector data.",
            "items": {
              "type": "string"
            }
          },
          "image_vector_fields": {
            "type": "array",
            "description": "The names of fields that represent image vector data.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Optional settings to control how fields are processed when using a configured Azure Search resource."
      },
      "azureSearchQueryType": {
        "type": "string",
        "description": "The type of Azure Search retrieval query that should be executed when using it as an Azure OpenAI chat extension.",
        "enum": [
          "simple",
          "semantic",
          "vector",
          "vector_simple_hybrid",
          "vector_semantic_hybrid"
        ],
        "x-ms-enum": {
          "name": "AzureSearchQueryType",
          "modelAsString": true,
          "values": [
            {
              "name": "simple",
              "value": "simple",
              "description": "Represents the default, simple query parser."
            },
            {
              "name": "semantic",
              "value": "semantic",
              "description": "Represents the semantic query parser for advanced semantic modeling."
            },
            {
              "name": "vector",
              "value": "vector",
              "description": "Represents vector search over computed data."
            },
            {
              "name": "vectorSimpleHybrid",
              "value": "vector_simple_hybrid",
              "description": "Represents a combination of the simple query strategy with vector data."
            },
            {
              "name": "vectorSemanticHybrid",
              "value": "vector_semantic_hybrid",
              "description": "Represents a combination of semantic search and vector data querying."
            }
          ]
        }
      },